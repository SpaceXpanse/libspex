name: Build Win64 
   
on:
  push: 
#    branches: [ build,06 ]
#  pull_request:
#    branches: [ $default-branch ]
    branches:
     - master
#     - /^cirrus.*$/
     - dev 
#     - 0.6.1 
#     - [0-9]+.[0-9]+*
     - '[0-9].[0-9].[0-9]+'
    tags:
#     - v*
     - build
#     - v[0-9]+.[0-9]+*
     - 'v[0-9].[0-9].[0-9]+'
  pull_request:
    branches:
      - dev

jobs:
  win64:

    runs-on: ubuntu-20.04
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.spacexpanse-params
    defaults:
      run:
        shell: bash

    steps:
    - run: echo "NOW=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: |
          .ccache
          .spacexpanse-params
        key: x86_64-w64-mingw32-ccache-${{ env.NOW }} 
        restore-keys: |
            x86_64-w64-mingw32-ccache-
    - run: |
        sudo apt-get update  
        sudo apt-get upgrade  
        sudo apt-get install git wget curl sed build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libminiupnpc-dev libnatpmp-dev libzmq3-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev
        #sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler libqrencode-dev
        sudo apt-get install g++-mingw-w64-x86-64 nsis libargtable2-dev libcurl4-openssl-dev doxygen libclang1-9 libclang-cpp9 graphviz libmicrohttpd-dev
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - run: |
        export LC_ALL=C.UTF-8
        unset CC CXX DISPLAY                 
        PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g') # strip out problematic Windows %PATH% imported var
    - run: echo 1 | sudo update-alternatives --config x86_64-w64-mingw32-g++            
    - run: sudo bash -c "echo 0 > /proc/sys/fs/binfmt_misc/status" # Disable WSL support for Win32 applications.
    - name: Build argtable2
      run: |
        echo "$PATH"
        #git clone https://github.com/RyuMaster/argtable2.git
        #cd argtable2
        #cmake . -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$MINGW_PREFIX
        #make -j2
        #sudo make install
        #sudo cp ./src/argtable2.h /home/../mingw64/include/argtable2.h
        #cd ..
    - name: Build libjson-rpc-cpp
      run: |
        mkdir jsoncpp && cd jsoncpp
        git clone -b 1.9.4 https://github.com/open-source-parsers/jsoncpp .
        git config user.email "test@example.com"
        git config user.name "Cherry Picker"
        git cherry-pick ac2870298ed5b5a96a688d9df07461b31f83e906
        #cd jsoncpp
        cmake . -DJSONCPP_WITH_PKGCONFIG_SUPPORT=ON -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF
        make -j2
        sudo make install/strip
        cd ..
        git clone https://github.com/cinemast/libjson-rpc-cpp
        cd libjson-rpc-cpp
        cmake . -DREDIS_SERVER=NO -DREDIS_CLIENT=NO -DCOMPILE_TESTS=NO -DCOMPILE_EXAMPLES=NO -DWITH_COVERAGE=NO
        make -j2
        sudo make install
        #cd dist
        #sudo cp -r ./ /home/../mingw64/
        cd ..
    - name: Obtain libglog.pc and lmdb.pc files
      run: |
        sudo curl -o /usr/local/lib/pkgconfig/libglog.pc https://raw.githubusercontent.com/xaya/XAYA_tutorial_code/master/libxayagame/Compile-scripts/libglog.pc
        sudo curl -o /usr/local/lib/pkgconfig/lmdb.pc https://raw.githubusercontent.com/xaya/XAYA_tutorial_code/master/libxayagame/Compile-scripts/lmdb.pc
    - name: Build secp256k1
      run: |
        git clone https://github.com/bitcoin-core/secp256k1.git
        cd secp256k1
        ./autogen.sh
        ./configure --disable-tests --disable-benchmark --enable-module-recovery
        make
        sudo make install
        cd ..
    - name: Build eth-utils
      run: |
        git clone https://github.com/xaya/eth-utils.git
        cd eth-utils
        ls -la
        grep -rl AX_CXX_COMPILE_STDCXX ./configure.ac | xargs sed -i 's/AX_CXX_COMPILE_STDCXX\(14, noext\)/AX_CXX_COMPILE_STDCXX\(17, noext\)/g'
        ./autogen.sh
        ./configure
        make
        sudo make install
        cd ..
    - name: Build libspex
      run: |
        git clone https://github.com/spacexpanse/libspex.git
        cd libspex
        curl -o configure_patch.diff https://raw.githubusercontent.com/xaya/XAYA_tutorial_code/master/libxayagame/Compile-scripts/configure_patch.diff
        patch --merge configure.ac configure_patch.diff
        ./autogen.sh
        CXXFLAGS="-fpermissive -Wno-deprecated-declarations" ./configure --enable-shared
        make -j2
        sudo make install

    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        mkdir -p deploy
        cp $GITHUB_WORKSPACE/ships/shipsd.exe $GITHUB_WORKSPACE/ships/ships-channel.exe $GITHUB_WORKSPACE/nonfungible/nonfungibled.exe $GITHUB_WORKSPACE/mover/moverd.exe $GITHUB_WORKSPACE/deploy
        #strip $GITHUB_WORKSPACE/deploy/*
        zip --junk-paths libspex-exe-${{ github.job }} $GITHUB_WORKSPACE/deploy/*
        #zip --junk-paths libspex-exe-${{ github.job }} $GITHUB_WORKSPACE/*
        ls -lh 
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}.rc1.win64
        release_name: libspex ${{ github.ref_name }}.${{ github.run_number }}-${{ github.job }}-win64
        draft: true
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./libspex-exe-${{ github.job }}.zip
        asset_name: libspex-exe-${{ github.job }}.zip
        asset_content_type: application/zip

